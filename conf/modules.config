    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Config file for defining DSL2 per module options and publishing paths
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Available keys to override module options:
            ext.args   = Additional arguments appended to command in module.
            ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
            ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
            ext.prefix = File name prefix for output files.
    ----------------------------------------------------------------------------------------
    */

    process {

        //
        // Statistics about the input sequences
        //

        withName: "CALCULATE_SEQSTATS" {
            publishDir = [
                path: { "${params.outdir}/summary/stats/sequences/seqstats" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml')|filename.contains('_summary.csv') ? null : filename }
            ]
        }

        withName: "CONCAT_SEQSTATS" {
            ext.prefix = { "summary_seqstats" }
        }

        withName: "EXTRACT_PLDDT"{
            publishDir = [
                path: { "${params.outdir}/summary/stats/structures/plddt" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml')|filename.contains('_summary.csv') ? null : filename }
            ]
        }

        withName: "CONCAT_PLDDT" {
            ext.prefix = { "summary_plddt" }
        }

        withName: TCOFFEE_SEQREFORMAT_SIM{
            ext.args = "-output=sim_idscore"
            publishDir = [
                path: { "${params.outdir}/summary/stats/sequences/perc_sim" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: "CONCAT_SIMSTATS" {
            ext.prefix = { "summary_simstats" }
        }

        withName: "MERGE_STATS"{
            ext.prefix = { "complete_summary_stats" }
            ext.args = "-f 1 -O"
            publishDir = [
                path: { "${params.outdir}/stats/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        //
        // Tree building (guidetree)
        //

        withName: "CLUSTALO_GUIDETREE|FAMSA_GUIDETREE|MAGUS_GUIDETREE" {
            tag = {
                [
                    "${meta.id}",
                    meta.args_guidetree ? "args: ${meta.args_guidetree}" : ""
                ].join(' ').trim()
            }
            ext.prefix = { "${meta.id}_${meta.guidetree}-args-${meta.args_guidetree_clean}" }
            ext.args = { "${meta.args_guidetree}" == "null" ? '' : "${meta.args_guidetree}" }
            publishDir = [
                path: { "${params.outdir}/trees/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        //
        // Alignment from a tree (treealign)
        //

        withName: "CLUSTALO_TREEALIGN|FAMSA_TREEALIGN|MAGUS_TREEALIGN|TCOFFEE_TREEALIGN"{
            tag = {
                [
                    "${meta.id}",
                    meta.args_treealign ? "args: ${meta.args_treealign}" : ""
                ].join(' ').trim()
            }
            ext.prefix = { "${meta.id}_${meta.treealign}-args-${meta.args_treealign_clean}_${meta.guidetree}-args-${meta.args_guidetree_clean}" }
            ext.args = { "${meta.args_treealign}" == "null" ? '' : "${meta.args_treealign}" }
            publishDir = [
                path: { "${params.outdir}/alignment/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        //
        // Alignment
        //

        withName: "CREATE_TCOFFEETEMPLATE" {
            ext.prefix = { "${meta.id}" }
        }
        withName: "CLUSTALO_ALIGN|FAMSA_ALIGN|FOLDMASON_EASYMSA|KALIGN_ALIGN|LEARNMSA_ALIGN|MAFFT|MAGUS_ALIGN|MUSCLE5_SUPER5|TCOFFEE_REGRESSIVE|TCOFFEE_ALIGN|TCOFFEE3D_ALIGN|UPP_ALIGN" {
            tag = {
                [
                    "${meta.id}",
                    meta.args_alignment ? "args: ${meta.args_alignment}" : ""
                ].join(' ').trim()
            }
            ext.prefix = { "${meta.id}_${meta.alignment}-args-${meta.args_alignment_clean}" }
            ext.args = { "${meta.args_alignment}" == "null" ? '' : "${meta.args_alignment}" }
            publishDir = [
                path: { "${params.outdir}/trees/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: "MTMALIGN_ALIGN" {
            tag = {
                [
                    "${meta.id}",
                    meta.tree ? "tree: ${meta.tree}" : "",
                    meta.args_guidetree ? "argstree: ${meta.args_guidetree}" : "",
                    meta.args_aligner ? "args: ${meta.args_aligner}" : ""
                ].join(' ').trim()
            }
            ext.prefix = { "${meta.id}_${meta.guidetree}-args-${meta.args_guidetree_clean}_${meta.alignment ?: meta.treealign}-args-${meta.args_alignment_clean ?: meta.args_treealign_clean}" }
            ext.args = { "${meta.args_aligner}" == "null" ? '' : "${meta.args_aligner}" }
            if(params.skip_compression){
                publishDir = [
                    path: { "${params.outdir}/alignment/${meta.id}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*.aln"
                ]
            }

        }

        withName: 'CONSENSUS'{
            ext.prefix = { "${meta.id}_CONSENSUS" }
            ext.args = { "-output fasta_aln, score_html, sp_ascii" }
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            if(!(params.skip_compression || !params.skip_eval )){
                publishDir = [
                    path: { "${params.outdir}/evaluation/consensus" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*{score_html,sp_ascii}"
                ]
            }else{
                publishDir = [
                    [
                        path: { "${params.outdir}/alignment/${meta.id}" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*.aln"
                    ],
                    [
                        path: { "${params.outdir}/evaluation/consensus" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*{score_html,sp_ascii}"
                    ]
                ]
            }
        }

        withName:"PIGZ_COMPRESS"{
            publishDir = [
                path: { "${params.outdir}/alignment/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        //
        // Alignment evaluation
        //

        withName: 'PARSE_IRMSD' {
            ext.prefix = { "${meta.id}_${meta.guidetree}-args-${meta.args_guidetree_clean}_${meta.alignment ?: meta.treealign}-args-${meta.args_alignment_clean ?: meta.args_treealign_clean}_irmsd" }
        }

        withName: 'TCOFFEE_ALNCOMPARE_SP' {
            ext.prefix = { "${meta.id}_${meta.guidetree}-args-${meta.args_guidetree_clean}_${meta.alignment ?: meta.treealign}-args-${meta.args_alignment_clean ?: meta.args_treealign_clean}_sp" }
            ext.args = "-compare_mode sp"
        }

        withName: 'TCOFFEE_ALNCOMPARE_TC' {
            ext.prefix = { "${meta.id}_${meta.guidetree}-args-${meta.args_guidetree_clean}_${meta.alignment ?: meta.treealign}-args-${meta.args_alignment_clean ?: meta.args_treealign_clean}_tc" }
            ext.args = "-compare_mode tc"
        }

        withName: 'TCOFFEE_IRMSD' {
            ext.prefix = { "${meta.id}_${meta.guidetree}-args-${meta.args_guidetree_clean}_${meta.alignment ?: meta.treealign}-args-${meta.args_alignment_clean ?: meta.args_treealign_clean}_irmsd" }
            publishDir = [
                path: { "${params.outdir}/evaluation/${task.process.tokenize(':')[-1].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            errorStrategy = 'retry'
        }

        withName: "CALC_GAPS" {
            ext.prefix = { "${meta.id}_${meta.guidetree}-args-${meta.args_guidetree_clean}_${meta.alignment ?: meta.treealign}-args-${meta.args_alignment_clean ?: meta.args_treealign_clean}_gaps" }
        }

        withName: "CONCAT_IRMSD" {
            ext.prefix = { "summary_irmsd" }
        }

        withName: "CONCAT_GAPS" {
            ext.prefix = { "summary_gaps" }
        }

        withName: "CONCAT_SP" {
            ext.prefix = { "summary_sp" }
        }

        withName: "CONCAT_TC" {
            ext.prefix = { "summary_tc" }
        }

        withName: "CONCAT_TCS" {
            ext.prefix = { "summary_tcs" }
        }

        withName: 'TCOFFEE_TCS' {
            ext.prefix = { "${meta.id}_${meta.guidetree}-args-${meta.args_guidetree_clean}_${meta.alignment ?: meta.treealign}-args-${meta.args_alignment_clean ?: meta.args_treealign_clean}_tcs" }
            publishDir = [
                path: { "${params.outdir}/evaluation/${task.process.tokenize(':')[-1].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: "MERGE_EVAL" {
            ext.prefix = { "complete_summary_eval" }
            ext.args = "-f 1,2,3,4,5,6,7 -O"
            publishDir = [
                path: { "${params.outdir}/evaluation/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: "MERGE_STATS_EVAL" {
            ext.prefix = { "complete_summary_stats_eval" }
            ext.args = "-f 1 -O"
            publishDir = [
                path: { "${params.outdir}/summary/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'MULTIQC' {
            ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
            publishDir = [
                path: { "${params.outdir}/multiqc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        //
        // Shiny app
        //
        withName: 'PREPARE_SHINY' {
            publishDir = [
                path: { "${params.outdir}/shiny_app" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        //
        // Visualization
        //
        withName: 'FOLDMASON_MSA2LDDTREPORT' {
            ext.prefix = { "${meta.id}_${meta.guidetree}-args-${meta.args_guidetree_clean}_${meta.alignment ?: meta.treealign}-args-${meta.args_alignment_clean ?: meta.args_treealign_clean}" }
            publishDir = [
                path: { "${params.outdir}/visualization" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
